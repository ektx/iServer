<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title><%= path %></title>
	<link rel="stylesheet" href="/server/js/highlight/styles/atom-one-light.css">
	<link rel="stylesheet" href="/server/css/md.css">
</head>
<body>
	<section id="inner"></section>
	
	<script src="/server/js/showdown/showdown.min.js"></script>
	<script src="/server/js/highlight/highlight.pack.js"></script>
	<script>
		showdown.extension('codehighlight', function() {
		  function htmlunencode(text) {
		    return (
		      text
		        .replace(/&amp;/g, '&')
		        .replace(/&lt;/g, '<')
		        .replace(/&gt;/g, '>')
		      );
		  }
		  return [
		    {
		      type: 'output',
		      filter: function (text, converter, options) {
		        // use new shodown's regexp engine to conditionally parse codeblocks
		        var left  = '<pre><code\\b[^>]*>',
		            right = '</code></pre>',
		            flags = 'g',
		            replacement = function (wholeMatch, match, left, right) {
		              // unescape match to prevent double escaping
		              match = htmlunencode(match);
		              return left + hljs.highlightAuto(match).value + right;
		            };
		        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);
		      }
		    }
		  ];
		});

		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("POST", "/vieworigincode", true);
		xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		xmlhttp.send('type=md&file=<%= path %>');
		xmlhttp.onreadystatechange = function() {
			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
				var converter = new showdown.Converter({ extensions: ['codehighlight']}),
					html = converter.makeHtml(xmlhttp.response);
				document.getElementById('inner').innerHTML = html;
			}
		}
	</script>
</body>
</html>